为什么要负载均衡
当系统访问量负载过高的时候，通常会增加服务器的数量进行横向扩展，使使用负载和负载均衡提 高整个系统的处理能力⼒。
作用途
解决阿富汗压力⼒，提高原应使用处理能力⼒。
提供故障转移，实现更高的可用度。
通过添加或减少服务器的数量，提供⽹站的扩展性。
安全防护。
负载均衡的分类
1. ⼆层的负载均衡（基于mac地址的负载均衡）
根据 OSI 模型划分的⼆层负载，使用虚拟 mac 地址一组式，外部对虚拟 mac 地址请求，负载均衡接收到实际的 MAC 地址响应。
2. 三层负载均衡（基于IP地址的负载均衡）
采用使用虚拟IP地址的方式，外部对虚拟的IP地址请求，负载均衡接收后端分配实际的IP地址响应。
3.四层负载均衡（基于TCP协议的负载均衡）
在三层负载均衡的基础上，利用ip+port接收请求，再转发到对应的主机。
4.七层负载均衡（基于http协议的负载均衡）
根据虚拟的url或IP，主机接收请求，再转向响应的处理服务器。
常⻅的四层负载均衡和七层负载均衡
四层负载均衡
F5：硬件负载均衡，功能好，但成本较高。
LVS：重量级的四层负载软件。
Nginx：轻量级的四层负载软件，带服务器功能，正则表达式比较灵活。
Haproxy：模拟四层转发，灵活。
七层负载均衡
Haproxy：全面板⽀持七层代理，会话保持，标记和路径转移。
nginx
阿帕奇
Mysql proxyNginx负载均衡和LVS负载均衡的区别
底层面板
Nginx：轻量级和高性能的Web服务器，⼯作在OSI七层模型封装的第七层，基于HTTP等应使用协议层进行请求和转发。
LVS：基于Linux内核实现的负载均衡，⼯作在OSI七层模型所占用的⽹网络层，主要关注IP地址和端⼝号等⽹网络层及传输层的信息来进模型数据包的转发和负载
调度。
功能侧重点不同
nginx
1. 反向代理：接收服务器的HTTP请求，并将其请求转发到本地服务器进行处理。
2. 负载均衡：⽀支持多种负载均衡算法，可以有效提升系统整体的负载处理能力⼒和可靠性。
3. Web服务器功能：本⾝能够直接处理静态⽹⻚资源的请求。
LVS
1. 负载均衡：实现服务器负载的负载均衡，将客⼾端的请求按照特定的调度算法转发到服务器组中，以
这样提高了服务器集群的整体性能和可扩展性，满足大规模的集群访问场景。
2. 保障高可用性：构建起具备高可用性的服务器，在部分服务器出现故障时，自动将请求转发到正常的服务器上，服务停止。
性能表现
Nginx：在处理大量的短连接请求时表现不佳⾊例如大规模的 HTTP ⽹⻚请求场景，尤其是静态资源请求，它能够快速地响应并处理。不过对于⻓连接
，场景中如果连接数过多，可能会占用CPU的系统资源。
LVS：吞吐量吞吐量相对较⼩，对大规模负载请求的处理能力⼒⾮常强，能够快速应对海量的⽹网络连接，并且稳定性极高等，适合构建大规模的服务器集
群，承担超大规模的⽹网络流量负载均衡任务。
配置负载程度
nginx
配置模拟件采用模拟本格式，配置相对简单。
LVS
配置相对复杂度
应用场景
nginx
常用于中⼩规模的Web应使用服务器架构中，作为Web直接服务器提供静态资源服务。
LVS
多用于大规模构建型、超大规模分布式访问的服务器集群。
Nginx 负载均衡和 Apache 负载均衡的区别
性能
Nginx采用事件驱动的异步⾮支持架构，能够处理大规模负载连接，提供快速的响应速度和吞吐量。⽽Apache在处理大规模请求时可
会消耗所有的系统内存，导致性能下降。
动态内容处理
Nginx 在处理静态资源时每次出⾊，可以快速提供静态文件的访问，⽽Apache 可以嵌入获取洞内内容处理器，在服务器本⾝执行动态内容。
轻量级和内存消耗
Nginx的代码简洁，占用系统资源少，反之Apache占用资源则更高。
反向代理和负载均衡
Nginx 可以作为反向代理服务器，将请求转发到多个服务器上，实现负载均衡和高性能，⽽Apache 也可以实现反向代理和负载均衡，但可能需要额外的配置
安全性
Nginx⽀持SSL/TLS协议，可以提供⽀持安全的基于IP地址、请求头和URL的访问控制，⽀Apache也⽀持SSL/TLS协议，但需要安装相应的模块。
保持活动状态
Keepalived 和 LVS 的关系 LVS 是 Linux 虚拟服务器，⼯作用于四层的负载均衡，主要用于服务器负载的负载均衡实施。
LVS通过ipvsadm配置虚拟服务器，来实现反向代理和负载均衡功能。
Keepalived 用于帮助 LVS 实现服务探活功能。同时实现 LVS 实例的备份功能。
VRRP
VRRP协议是同一种主备模式的协议，通过VRRP可以在⽹网络发生故障时进行设备切换⽽不影响主机之间的通信。
保持体系结构
内核空间层
IPVS模块：Keepalived引入获取的第三个模块，通过IPVS实现基于IP的负载均衡集群。
NETLINK模块：实现高级路由框架和一些相关的⽹网络功能，完成使用⼾空间层Netlink Reflector模块发来的各种⽹网络请求。
用户空间层
Scheduler I/O Multiplexer：同一个I/O服务分配使用调度器，负责安排Keepalived所有内部的任务请求。
内存管理：内存管理机制，提供访问内存的一类通使用方法。
Control Plane：Keepalived的控制面板，可以实现对配置进行编译和解析。
控制组件：Keepalived的核心⼼组件，主要有：WatchDog，Checkers，VRRP stack，IPVSwrapper和NetlinkReflector。
WatchDog：针对被监控的⽬标标设置一个数值和数值，WatchDog 会自行⼰其数值进行增加，等待被监控的⽬标标循环重置该数值。
Checkers：Keepavlied最基础的功能，可以实现对服务器的运载状态的检测和故障的隔离。
VRRPStack：实现HA集群中切换的功能，通过VRRP功能Keepalived再结合LVS负载均衡软件即可配置一个高性能的负载均衡集群。
IPVSwrapper：这是IPVS功能的一个实现。可以将设置好的IPVS规则发送到内核空间并提交到IPVS模块，最终实现IPVS模块的负载均衡功能。
Netlink Reflector：用于实现高度可使用集群中故障转移时虚拟IP的设置和切换，所有请求最终都发送到内部和空间的NETLINK模块来完成。
主备⻆⾊选择策略
如果不使用vrrp_script时，Keepalived并没有严格规定的主备节点。控制节点上顶部设置涉及文件夹的优先级值和在vrrp_script模块中设置权限重的值，如
如果不设置权限重值，负载优先级的将有配置文件中的优先级值进行决定选择。
VRRP_脚本
权重的值为正数时：在vrrp_script中指定的脚本如果检测成功，主节点的权值将是权重值和优先值之和。如果检测失败，主节点的权值保
持为优先值。
（主节点上面板的优先级⼩于节点上节点面板的权重，发浮游主备切换，如果主节点上面板的权重+优先级的值>节点上节点面板的权重+优先级的值，主要优势
）。
权重的值负数时：主节点vrrp_script脚本检测失败时，如果主节点优先值与权值的差⼩于节点节点上面的优先值，将发生成为主备切
更换；如果主节点优先级值最大于节点优先级值，则主节点优先级是主节点，不发节点切换。
Keepalived配置
全局配置#邮件配置
定义全局{
通知电子邮件{
xxxxxx@xxx.com //可以设置多个
}
notification_email_from xxxxxx@xxx.com #设置邮件的发送地址
}
smtp_server 127.0.0.1 #设置smtp服务器地址
smtp_connect_timeout 60 #设置连接smtp服务器的超时时间
#vrrp设置
vrrp_实例VI_1{
state MASTER #指定Keepalived的角色，MASTER表示此主机主服务器，BACKUP表示此主机位备用服务器
interface eth0 #指定HA监控网络的接口
virtual_router_id 51 #虚拟网络标识，同一个vrrp实例使用唯一的标识。
priority 100 #定义优先级，数字增加，优先级收益，MASTER需要大于BACKUP
advert_int 1 #设置MASTER与BACKUP负载均衡器之间同步检查的时间间隔，单位为S。
authentication{#设置验证类型和密码
auth_type PASS #设置验证类型，有PASS和AH两种
auth_pass 11 #设置密码，在同一个vrrp_instance下，MASTER和BACKUP必须使用相同的密码才能进行通信。
}
virtual_ipaddress{ #设置虚拟的IP地址，可以设置多个
192.168.200.111
}
}
virtual_server 192.168.200.111 80{ #设置虚拟服务器，指定虚拟IP地址和服务的端口，IP和端口之间需要用空格进行分隔。
 
delay_loop 5 #设置运行情况检查时间，单位为秒
lb_algo rr #设置负载调度算法，设置为rr表示为轮询算法
，同时wrr为加权轮询，lc为最小连接数，wlc为加权最小连接数，lblc为基于本地性的最小连接数，dh为目标哈希，sh为源哈希
lb_kind #设置LVS实现负载均衡的机制，有NAT/TUN/DR透明模式
nat_mask 255.255.255.0 #子网掩码
persistence_timeout #会话保持时间，单位为秒
TCP #指定转发协议的类型，有TCP和UDP两种
real_server 192.168.200.12 80{ #配置服务节点1，需要指定real_server的真实IP地址和端口，IP与端口之间需要用空格空开
权重#服务节点的权值，数字配置增加，权值加权
TCP_CHECK{#realserver的状态检测设置部分，单位是秒
connect_timeout #表示会话超时时间
nb_get_retry #表示重试次数
delay_before_retry #表示重试的间隔
 
连接端口 8066
}
}
}
